---
apiVersion: v1
kind: Namespace
metadata:
  name: jenkins
  labels:
    istio-injection: disabled
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jenkins
  namespace: jenkins

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: jenkins
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["create","delete","get","list","patch","update","watch"]
- apiGroups: [""]
  resources: ["services"]
  verbs: ["create","delete","get","list","patch","update","watch"]
- apiGroups: ["*"]
  resources: ["deployments"]
  verbs: ["create","delete","get","list","patch","update","watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["create","delete","get","list","patch","update","watch"]
- apiGroups: [""]
  resources: ["pods/exec"]
  verbs: ["create","delete","get","list","patch","update","watch"]
- apiGroups: [""]
  resources: ["pods/portforward"]
  verbs: ["create","delete","get","list","patch","update","watch"]
- apiGroups: [""]
  resources: ["pods/log"]
  verbs: ["create","delete","get","list","patch","update","watch"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create","delete","get","list","patch","update","watch"]

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: jenkins
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: jenkins
subjects:
- kind: ServiceAccount
  name: jenkins
  namespace: jenkins
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: jenkinshome
  namespace: jenkins
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
kind: Service
apiVersion: v1
metadata:
  name: jenkins
  namespace: jenkins
spec:
  selector:
    app: jenkins
  type: LoadBalancer
  ports:
    - nodePort: 30100
      name: jenkinshttp
      protocol: TCP
      port: 8080
      targetPort: 8080
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkins
  namespace: jenkins
  labels:
    apps: jenkins
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jenkins
  template:
    metadata:
      labels:
        app: jenkins
    spec:
      serviceAccountName: jenkins
      containers:
        - name: jenkins
          image: clemenko/jenkins
          imagePullPolicy: Always
          ports:
            - name: jenkinsweb
              containerPort: 8080
          volumeMounts:
#          - name: jenkinshomepv
#            mountPath: "/var/jenkins_home"
          - name: docker-sock
            mountPath: "/var/run/docker.sock"
      volumes:
#      - name: jenkinshomepv
#        persistentVolumeClaim:
#          claimName: jenkinshome
      - name: docker-sock
        hostPath:
            path: /var/run/docker.sock
            type: File

---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: jenkins
  namespace: jenkins
spec:
  rules:
    - host: jenkins.dockr.life
      http:
        paths:
        - path: /
          backend:
            # This assumes http-svc exists and routes to healthy endpoints
            serviceName: jenkins
            servicePort: 8080
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: jenkins-ingressroute
  namespace: jenkins
spec:
  entryPoints:
    - web
  routes:
    - match: Host(`jenkins.dockr.life`)
      kind: Rule
      services:
        - name: jenkins
          port: 8080