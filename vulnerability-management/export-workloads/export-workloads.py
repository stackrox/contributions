#!/usr/bin/env python

# This script pulls workload vulnerabilities in the form of deployments and their
# associated images including image vulnerabilities.
#
# The output is streamed to STDOUT as a series of Python objects with the schema
#
# {"result": {"deployment": {...}, "images": [...]}}
# ...
# {"result": {"deployment": {...}, "images": [...]}}
#
# Further processing may be done on the parsed objects.
#
# Requires ROX_ENDPOINT and ROX_API_TOKEN environment variables.
# The API token requires read access on images and deployments.

import argparse
import json
import os
import requests

parser = argparse.ArgumentParser("export-workloads")
parser.add_argument("--query", help="query to filter the deployments (default \"\")", default="")
parser.add_argument("--timeout", help="timeout in seconds (default 0 = no timeout)", default=0, type=int)
args = parser.parse_args()

endpoint = os.environ["ROX_ENDPOINT"].removeprefix("https://")
url = f"https://{endpoint}/v1/export/vuln-mgmt/workloads"
parameters = f"query={args.query}&timeout={args.timeout}"
headers = {"Authorization": f"Bearer {os.environ['ROX_API_TOKEN']}"}

session = requests.Session()
with session.get(f"{url}?{parameters}", headers=headers, stream=True) as resp:
    resp.raise_for_status()
    for line in resp.iter_lines():
        if line:
            # Parse JSON object for further processing. Here we simply print out the content.
            obj = json.loads(line)
            print(f"{obj}\n")
